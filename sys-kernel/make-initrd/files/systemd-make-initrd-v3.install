#!/bin/bash

COMMAND="$1"
KERNEL_VERSION="$2"
BOOT_DIR_ABS="$3"
KERNEL_IMAGE="$4"

# If KERNEL_INSTALL_MACHINE_ID is defined but empty, BOOT_DIR_ABS is a fake directory.
# So, let's skip to create initrd.
if ! [[ ${KERNEL_INSTALL_MACHINE_ID-x} ]]; then
    exit 0
fi

# Do not attempt to create initramfs if the supplied image is already a UKI
if [[ "$KERNEL_INSTALL_IMAGE_TYPE" = "uki" ]]; then
    exit 0
fi

# Mismatching the install layout and the --uefi/--no-uefi opts just creates a mess.
if [[ $KERNEL_INSTALL_LAYOUT == "uki" && -n $KERNEL_INSTALL_STAGING_AREA ]]; then
    BOOT_DIR_ABS="$KERNEL_INSTALL_STAGING_AREA"
    if [[ -z $KERNEL_INSTALL_UKI_GENERATOR || $KERNEL_INSTALL_UKI_GENERATOR == "make-initrd" ]]; then
        # No uki generator preference set or we have been chosen
        IMAGE="uki.efi"
        UKI=1
    elif [[ -z $KERNEL_INSTALL_INITRD_GENERATOR || $KERNEL_INSTALL_INITRD_GENERATOR == "make-initrd" ]]; then
        # We aren't the uki generator, but we have been requested to make the initrd
        IMAGE="initrd"
        UKI=
    else
        exit 0
    fi
elif [[ $KERNEL_INSTALL_LAYOUT == "bls" && -n $KERNEL_INSTALL_STAGING_AREA ]]; then
    BOOT_DIR_ABS="$KERNEL_INSTALL_STAGING_AREA"
    if [[ -z $KERNEL_INSTALL_INITRD_GENERATOR || $KERNEL_INSTALL_INITRD_GENERATOR == "make-initrd" ]]; then
        IMAGE="initrd"
        UKI=
    else
        exit 0
    fi
elif [[ $KERNEL_INSTALL_LAYOUT == "grub" || $KERNEL_INSTALL_LAYOUT == "compat" || $KERNEL_INSTALL_LAYOUT == "efistub" ]]; then
    BOOT_DIR_ABS="$KERNEL_INSTALL_STAGING_AREA"
    if [[ -z $KERNEL_INSTALL_UKI_GENERATOR || $KERNEL_INSTALL_UKI_GENERATOR == "make-initrd" ]]; then
        IMAGE="uki.efi"
        UKI=1
    elif [[ -z $KERNEL_INSTALL_INITRD_GENERATOR || $KERNEL_INSTALL_INITRD_GENERATOR == "make-initrd" ]]; then
        IMAGE="initrd"
        UKI=
    else
        exit 0
    fi
else
    # No layout information, use users --uefi/--no-uefi preference
    if [[ -d $BOOT_DIR_ABS ]]; then
        IMAGE="initrd"
    else
        BOOT_DIR_ABS="/boot"
        IMAGE="initramfs-${KERNEL_VERSION}.img"
    fi
fi

ret=0

case "$COMMAND" in
    add)
        if [[ $IMAGE == "uki.efi" ]]; then
            IMAGE_PREGENERATED=${KERNEL_IMAGE%/*}/uki.efi
        else
            IMAGE_PREGENERATED=${KERNEL_IMAGE%/*}/initrd
        fi
        if [[ -f ${IMAGE_PREGENERATED} ]]; then
            # we found an initrd or uki.efi at the same place as the kernel
            # use this and don't generate a new one
            [[ $KERNEL_INSTALL_VERBOSE == 1 ]] && echo \
                "There is an ${IMAGE} image at the same place as the kernel, skipping generating a new one"
            cp --reflink=auto "$IMAGE_PREGENERATED" "$BOOT_DIR_ABS/$IMAGE" \
                && chown root:root "$BOOT_DIR_ABS/$IMAGE" \
                && chmod 0600 "$BOOT_DIR_ABS/$IMAGE" \
                && exit 0
        fi

        kconfig=
        kconfig_lib=/lib/modules/"$KERNEL_VERSION"/source/.config

        if [ -s "$kconfig_lib" ]; then
                kconfig="$kconfig_lib"
        else
                die "could't find kernel config (tried $kconfig_lib)"
        fi

        # To get rid of portage variables.
        unset ARCH FEATURES

        # shellcheck disable=SC2046
        make-initrd \
            $([[ $KERNEL_INSTALL_VERBOSE == 1 ]] && echo --verbose) \
            --kernel "$KERNEL_VERSION" \
            ${UKI+UKI="$UKI"} \
            ${kconfig:+KERNEL_CONFIG="$kconfig"} \
            IMAGEFILE="$BOOT_DIR_ABS/$IMAGE" \
            UKI_IMAGEFILE="$BOOT_DIR_ABS/$IMAGE" \
            #
        ret=$?
        ;;

    remove)
        rm -f -- "$BOOT_DIR_ABS/$IMAGE"
        ret=$?
        ;;
esac

exit $ret
